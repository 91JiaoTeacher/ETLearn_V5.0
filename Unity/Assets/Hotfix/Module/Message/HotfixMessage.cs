// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HotfixMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ETHotfix {

  #region Messages
  public partial class C2G_Login : pb::IMessage {
    private static readonly pb::MessageParser<C2G_Login> _parser = new pb::MessageParser<C2G_Login>(() => (C2G_Login)MessagePool.Instance.Fetch(typeof(C2G_Login)));
    public static pb::MessageParser<C2G_Login> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int account_;
    /// <summary>
    /// 帐号
    /// </summary>
    public int Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    private string password_ = "";
    /// <summary>
    /// 密码
    /// </summary>
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Account != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = 0;
      password_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Account = input.ReadInt32();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_Login : pb::IMessage {
    private static readonly pb::MessageParser<G2C_Login> _parser = new pb::MessageParser<G2C_Login>(() => (G2C_Login)MessagePool.Instance.Fetch(typeof(G2C_Login)));
    public static pb::MessageParser<G2C_Login> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string address_ = "";
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int key_;
    public int Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (Key != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Key);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Key != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Key);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      address_ = "";
      key_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
          case 16: {
            Key = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_RequestEnterMap : pb::IMessage {
    private static readonly pb::MessageParser<C2G_RequestEnterMap> _parser = new pb::MessageParser<C2G_RequestEnterMap>(() => (C2G_RequestEnterMap)MessagePool.Instance.Fetch(typeof(C2G_RequestEnterMap)));
    public static pb::MessageParser<C2G_RequestEnterMap> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int account_;
    /// <summary>
    /// 帐号
    /// </summary>
    public int Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Account);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Account != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Account);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Account = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_RequestEnterMap : pb::IMessage {
    private static readonly pb::MessageParser<G2C_RequestEnterMap> _parser = new pb::MessageParser<G2C_RequestEnterMap>(() => (G2C_RequestEnterMap)MessagePool.Instance.Fetch(typeof(G2C_RequestEnterMap)));
    public static pb::MessageParser<G2C_RequestEnterMap> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private float positionX_;
    public float PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    private float positionY_;
    public float PositionY {
      get { return positionY_; }
      set {
        positionY_ = value;
      }
    }

    private float positionZ_;
    public float PositionZ {
      get { return positionZ_; }
      set {
        positionZ_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PositionX != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(PositionX);
      }
      if (PositionY != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PositionY);
      }
      if (PositionZ != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PositionZ);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (PositionX != 0F) {
        size += 1 + 4;
      }
      if (PositionY != 0F) {
        size += 1 + 4;
      }
      if (PositionZ != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      positionX_ = 0f;
      positionY_ = 0f;
      positionZ_ = 0f;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            PositionX = input.ReadFloat();
            break;
          }
          case 21: {
            PositionY = input.ReadFloat();
            break;
          }
          case 29: {
            PositionZ = input.ReadFloat();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_PlayerPosition : pb::IMessage {
    private static readonly pb::MessageParser<C2M_PlayerPosition> _parser = new pb::MessageParser<C2M_PlayerPosition>(() => (C2M_PlayerPosition)MessagePool.Instance.Fetch(typeof(C2M_PlayerPosition)));
    public static pb::MessageParser<C2M_PlayerPosition> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private float positionX_;
    public float PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    private float positionY_;
    public float PositionY {
      get { return positionY_; }
      set {
        positionY_ = value;
      }
    }

    private float positionZ_;
    public float PositionZ {
      get { return positionZ_; }
      set {
        positionZ_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PositionX != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(PositionX);
      }
      if (PositionY != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PositionY);
      }
      if (PositionZ != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PositionZ);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (PositionX != 0F) {
        size += 1 + 4;
      }
      if (PositionY != 0F) {
        size += 1 + 4;
      }
      if (PositionZ != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      positionX_ = 0f;
      positionY_ = 0f;
      positionZ_ = 0f;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            PositionX = input.ReadFloat();
            break;
          }
          case 21: {
            PositionY = input.ReadFloat();
            break;
          }
          case 29: {
            PositionZ = input.ReadFloat();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_PlayerPosition : pb::IMessage {
    private static readonly pb::MessageParser<M2C_PlayerPosition> _parser = new pb::MessageParser<M2C_PlayerPosition>(() => (M2C_PlayerPosition)MessagePool.Instance.Fetch(typeof(M2C_PlayerPosition)));
    public static pb::MessageParser<M2C_PlayerPosition> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private float positionX_;
    public float PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    private float positionY_;
    public float PositionY {
      get { return positionY_; }
      set {
        positionY_ = value;
      }
    }

    private float positionZ_;
    public float PositionZ {
      get { return positionZ_; }
      set {
        positionZ_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PositionX != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(PositionX);
      }
      if (PositionY != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PositionY);
      }
      if (PositionZ != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PositionZ);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (PositionX != 0F) {
        size += 1 + 4;
      }
      if (PositionY != 0F) {
        size += 1 + 4;
      }
      if (PositionZ != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      positionX_ = 0f;
      positionY_ = 0f;
      positionZ_ = 0f;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            PositionX = input.ReadFloat();
            break;
          }
          case 21: {
            PositionY = input.ReadFloat();
            break;
          }
          case 29: {
            PositionZ = input.ReadFloat();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_PlayerRoleNetwork : pb::IMessage {
    private static readonly pb::MessageParser<C2G_PlayerRoleNetwork> _parser = new pb::MessageParser<C2G_PlayerRoleNetwork>(() => (C2G_PlayerRoleNetwork)MessagePool.Instance.Fetch(typeof(C2G_PlayerRoleNetwork)));
    public static pb::MessageParser<C2G_PlayerRoleNetwork> Parser { get { return _parser; } }

    private int account_;
    public int Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    private float positionX_;
    public float PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    private float positionY_;
    public float PositionY {
      get { return positionY_; }
      set {
        positionY_ = value;
      }
    }

    private float positionZ_;
    public float PositionZ {
      get { return positionZ_; }
      set {
        positionZ_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Account);
      }
      if (PositionX != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PositionX);
      }
      if (PositionY != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PositionY);
      }
      if (PositionZ != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PositionZ);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Account != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Account);
      }
      if (PositionX != 0F) {
        size += 1 + 4;
      }
      if (PositionY != 0F) {
        size += 1 + 4;
      }
      if (PositionZ != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = 0;
      positionX_ = 0f;
      positionY_ = 0f;
      positionZ_ = 0f;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Account = input.ReadInt32();
            break;
          }
          case 21: {
            PositionX = input.ReadFloat();
            break;
          }
          case 29: {
            PositionY = input.ReadFloat();
            break;
          }
          case 37: {
            PositionZ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_GetOtherPlayer : pb::IMessage {
    private static readonly pb::MessageParser<C2G_GetOtherPlayer> _parser = new pb::MessageParser<C2G_GetOtherPlayer>(() => (C2G_GetOtherPlayer)MessagePool.Instance.Fetch(typeof(C2G_GetOtherPlayer)));
    public static pb::MessageParser<C2G_GetOtherPlayer> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int account_;
    public int Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Account);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Account != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Account);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Account = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_OtherPlayerEnterMap : pb::IMessage {
    private static readonly pb::MessageParser<G2C_OtherPlayerEnterMap> _parser = new pb::MessageParser<G2C_OtherPlayerEnterMap>(() => (G2C_OtherPlayerEnterMap)MessagePool.Instance.Fetch(typeof(G2C_OtherPlayerEnterMap)));
    public static pb::MessageParser<G2C_OtherPlayerEnterMap> Parser { get { return _parser; } }

    private int account_;
    public int Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    private float positionX_;
    public float PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    private float positionY_;
    public float PositionY {
      get { return positionY_; }
      set {
        positionY_ = value;
      }
    }

    private float positionZ_;
    public float PositionZ {
      get { return positionZ_; }
      set {
        positionZ_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Account);
      }
      if (PositionX != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PositionX);
      }
      if (PositionY != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PositionY);
      }
      if (PositionZ != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PositionZ);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Account != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Account);
      }
      if (PositionX != 0F) {
        size += 1 + 4;
      }
      if (PositionY != 0F) {
        size += 1 + 4;
      }
      if (PositionZ != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = 0;
      positionX_ = 0f;
      positionY_ = 0f;
      positionZ_ = 0f;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Account = input.ReadInt32();
            break;
          }
          case 21: {
            PositionX = input.ReadFloat();
            break;
          }
          case 29: {
            PositionY = input.ReadFloat();
            break;
          }
          case 37: {
            PositionZ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_OtherPlayerPosition : pb::IMessage {
    private static readonly pb::MessageParser<G2C_OtherPlayerPosition> _parser = new pb::MessageParser<G2C_OtherPlayerPosition>(() => (G2C_OtherPlayerPosition)MessagePool.Instance.Fetch(typeof(G2C_OtherPlayerPosition)));
    public static pb::MessageParser<G2C_OtherPlayerPosition> Parser { get { return _parser; } }

    private static readonly pb::FieldCodec<int> _repeated_dirAccount_codec
        = pb::FieldCodec.ForInt32(10);
    private pbc::RepeatedField<int> dirAccount_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> DirAccount {
      get { return dirAccount_; }
      set { dirAccount_ = value; }
    }

    private static readonly pb::FieldCodec<float> _repeated_positionX_codec
        = pb::FieldCodec.ForFloat(18);
    private pbc::RepeatedField<float> positionX_ = new pbc::RepeatedField<float>();
    public pbc::RepeatedField<float> PositionX {
      get { return positionX_; }
      set { positionX_ = value; }
    }

    private static readonly pb::FieldCodec<float> _repeated_positionY_codec
        = pb::FieldCodec.ForFloat(26);
    private pbc::RepeatedField<float> positionY_ = new pbc::RepeatedField<float>();
    public pbc::RepeatedField<float> PositionY {
      get { return positionY_; }
      set { positionY_ = value; }
    }

    private static readonly pb::FieldCodec<float> _repeated_positionZ_codec
        = pb::FieldCodec.ForFloat(34);
    private pbc::RepeatedField<float> positionZ_ = new pbc::RepeatedField<float>();
    public pbc::RepeatedField<float> PositionZ {
      get { return positionZ_; }
      set { positionZ_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      dirAccount_.WriteTo(output, _repeated_dirAccount_codec);
      positionX_.WriteTo(output, _repeated_positionX_codec);
      positionY_.WriteTo(output, _repeated_positionY_codec);
      positionZ_.WriteTo(output, _repeated_positionZ_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += dirAccount_.CalculateSize(_repeated_dirAccount_codec);
      size += positionX_.CalculateSize(_repeated_positionX_codec);
      size += positionY_.CalculateSize(_repeated_positionY_codec);
      size += positionZ_.CalculateSize(_repeated_positionZ_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      dirAccount_.Clear();
      positionX_.Clear();
      positionY_.Clear();
      positionZ_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            dirAccount_.AddEntriesFrom(input, _repeated_dirAccount_codec);
            break;
          }
          case 18:
          case 21: {
            positionX_.AddEntriesFrom(input, _repeated_positionX_codec);
            break;
          }
          case 26:
          case 29: {
            positionY_.AddEntriesFrom(input, _repeated_positionY_codec);
            break;
          }
          case 34:
          case 37: {
            positionZ_.AddEntriesFrom(input, _repeated_positionZ_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
